(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{520:function(t,a,s){"use strict";s.r(a);var n=s(30),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"十、拦截器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十、拦截器"}},[t._v("#")]),t._v(" 十、拦截器")]),t._v(" "),s("h3",{attrs:{id:"_1、拦截器的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、拦截器的配置"}},[t._v("#")]),t._v(" 1、拦截器的配置")]),t._v(" "),s("p",[t._v("SpringMVC中的拦截器用于拦截控制器方法的执行")]),t._v(" "),s("p",[t._v("SpringMVC中的拦截器需要实现HandlerInterceptor或者HandlerInterceptorAdapter(已过时)，重写下面的三个方法")]),t._v(" "),s("p",[t._v("事实上是HandlerInterceptorAdapter继承了ASyncHandlerInterceptor, AsyncHandlerInterceptor又继承了HandlerInterceptor")]),t._v(" "),s("p",[t._v("SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：")]),t._v(" "),s("p",[t._v("最简单的配置方法（第一种配置方法）\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/leejiayang/BlogImages@main/springmvc/026.PNG",alt:""}}),t._v(" "),s("Bean",[t._v("表示一个对象")])],1),t._v(" "),s("p",[t._v("图片里面的设置也会被拦截，因为本质上这个也是控制器方法")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/leejiayang/BlogImages@main/springmvc/027.PNG",alt:""}})]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("\n\n第二种配置方法\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("interceptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\x3c!-- <bean class="com.atguigu.interceptor.FirstInterceptor"></bean> --\x3e')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ref")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("bean")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("firstInterceptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ref")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("interceptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("interceptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 拦截所有请求 --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 这里的/*表示访问该页面的上下一层目录 --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("mapping")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("mapping")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/**"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 排除不拦截的特殊情况 --\x3e")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("exclude-mapping")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/testRequestEntity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 指定拦截 器 --\x3e")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ref")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("bean")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("firstInterceptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ref")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("mvc:")]),t._v("interceptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- \n\t以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求\n--\x3e")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2、拦截器的三个抽象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、拦截器的三个抽象方法"}},[t._v("#")]),t._v(" 2、拦截器的三个抽象方法")]),t._v(" "),s("p",[s("strong",[t._v("过滤器的拦截器的区别是什么？？")]),t._v("\nSpringMVC中的拦截器有三个抽象方法：")]),t._v(" "),s("p",[t._v("preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法")]),t._v(" "),s("p",[t._v("postHandle：控制器方法执行之后执行postHandle()")]),t._v(" "),s("p",[t._v("afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()")]),t._v(" "),s("h3",{attrs:{id:"_3、多个拦截器的执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、多个拦截器的执行顺序"}},[t._v("#")]),t._v(" 3、多个拦截器的执行顺序")]),t._v(" "),s("p",[t._v("a>若每个拦截器的preHandle()都返回true")]),t._v(" "),s("p",[t._v("此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：")]),t._v(" "),s("p",[t._v("preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行")]),t._v(" "),s("p",[t._v("b>若某个拦截器的preHandle()返回了false")]),t._v(" "),s("p",[t._v("preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行")])])}),[],!1,null,null,null);a.default=e.exports}}]);